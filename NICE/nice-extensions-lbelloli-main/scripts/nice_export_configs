from nice_ext.api.modules import _modules
from string import Template
from argparse import ArgumentParser
import json

if __name__ == '__main__':

    parser = ArgumentParser(description='Run the pipeline on the selected suject')

    parser.add_argument('--output', metavar='o', type=str, default=None,
                        help='path to the output file where to export the configs.')
    
    parser.add_argument('--prefixes', metavar='...prefixes', type=str, 
                        nargs='*', default=[''],
                        help='strings to filter modules to export by their description prefix.')

    args = parser.parse_args()
    output = args.output
    prefixes = args.prefixes

    modules = {}
    for module_name, configs in _modules.items():
        modules[module_name] = []
        for config_name, func in configs.items():
            
            # Obtain the config description (default to the config name)
            description = config_name
            if hasattr(func, '__description__'):
                description = func.__description__
            
            if all([not description.startswith(prefix) for prefix in prefixes]):
                continue

            # Add estimators descriptions if there are estimators in the module (reducers)
            if hasattr(func, '__estimators__'):
                func_name = config_name.split('/')[-1]
                description = Template(description).safe_substitute(
                    estimator=func.__estimators__[func_name]
                )
            
            modules[module_name].append({
                'name': config_name,
                'description': description
            })
    
    if output is None:
        print(json.dumps(modules, indent=4))
    else:
        with open(output, 'w') as file:
            json.dump(modules, file, indent=4)